[
    {
        "id": "3423",
        "parent_exercise_id": null,
        "course_id": "114",
        "name": "Functions",
        "slug": "functions__functions-intro",
        "sequence_num": 0,
        "review_type": "manual",
        "submission_type": null,
        "github_link": "https://github.com/navgurukul/newton/tree/master/functions/functions-intro.md",
        "solution": null,
        "content": [
            {
                "type": "markdown",
                "value": "# Basics of Functions\n\n Function ek block of code hota hai jo ki run hota hai jab hum use call karte hai. Function mei hum data pass kar sekhte hai jise hum parameter kahete hai. Function data return karta hai. Functions ka use kar ke hum ek baar kuch code likh kar usko bahot baar use kar sakte hai. Isse humara kaam bahot aasan ho jata hai. "
            },
            {
                "type": "python",
                "value": {
                    "code": "print (\"NavGurukul\")\n\ndef say_hello():\n    print (\"Hello!\")\n    print (\"Aap kaise ho?\")\n\nsay_hello()\nprint (\"Python is awesome\")\nsay_hello()\nprint (\"Hello\u2026\")\nsay_hello()",
                    "testCases": []
                }
            },
            {
                "type": "markdown",
                "value": "Isko chala ke dekho. Iski output kuch aisi aayegi: Dhayn se dekho ki code mein jahan bhi `say_hello()` likha hai, wahan `Hello!` aur `Aap kaise ho?` waali lines print ho gayi hain. Yeh isliye hua hai kyunki humne ek baar doosri line mein `def say_hello()` ka use kar ke ek function likh diya. Ab jab bhi yeh function call hoga toh iske andar waala code chal jayega. Iss tareeke se hum baar baar ek code ko user kar sakte hain. \n\n## Introduction to Functions\n\n Functions ka use karke hum kuch code ek baar likh ke usse baar baar wahi kaam karva sakte hain. Aap abhi tak bahot functions ka use kar chuke ho. Iss code ko padho: "
            },
            {
                "type": "python",
                "value": {
                    "code": "names_list = [\"Fiza\", \"Shivam\", \"Imtiyaz\", \"Deepanshu\", \"Rahman\"]\nprint (len(names_list))",
                    "testCases": []
                }
            },
            {
                "type": "markdown",
                "value": "`Ouput:-` `5` Yahan `len(names_list)` ka use kar ke humne jana ki list mein kitne item hai. Ab hum apne code mein `len` ka use kar kisi bhi list ke items ki ginti kar sakte hain. Yahan `len` ek function hai. Functions ke bina humein list ki items ki ginti nikalne ke liye baar baar code likhna padega. Isko behtar samajhne hum aage wale examples mein iska code khud likhenge. Hum ek function likhenge. Iss code ko pehle chala ke dekho, aur fir neeche padiye iske baare mein samajhne ke liye. "
            },
            {
                "type": "python",
                "value": {
                    "code": "def definition_say_hello():\n    print (\"NavGurukul\")\n    print (\"NavGurukul mei humein apni learning ki responsibility leni padti hai.\")\n\ndefinition_say_hello()\n\nprint (\"NavGurukul mei hum sab logo ko ek tarah se treat karte hai.\")\n\ndefinition_say_hello()",
                    "testCases": []
                }
            },
            {
                "type": "markdown",
                "value": "**Output :-** Ek aur example FUNCTIONS samajhne ke liye. Iss code ko padh ke output socho. Chala ke dekhne ke baad dhyan se padho. 1. Shuruat mein `def` ka use kar ke hum python ko bata rahe ki humne ek `definition_say_hello` naam ka function likha hai.\n![](assets/function_defn_inst_1.png)\n2. Iss function ka code (do print karne ki lines) kuch indent (space) deke `def definition_say_hello()` ke neeche likha hua hai. Inn spaces se python samajh jata hai ki yeh function ka code hai.\n![](assets/function_defn_inst_2.png)\n3. Fir agli line, `definition_say_hello()` mein humne function ko bulaya hai jisse function ke andar wala code chal jata hai. Isko **FUNCTION CALL** karna kehte hain.\n![](assets/function_defn_inst_3.png)\n4. Iske baad print statement use kar ke humne ek string print kiya hai.\n![](assets/function_defn_inst_4.png)\n5. Aakhir mein humne firse `definition_say_hello()` likh ke function call ki hai. Ek aur baar function ek baar andar wale code ko chala deti hai. Isse andar waali jo function ke andar code hai - yaani - *2 print* command chal jati hai.\n![](assets/function_defn_inst_5.png)\n\n\n "
            },
            {
                "type": "python",
                "value": {
                    "code": "def function_say_bye():\n    print (\"Aapko mil ke maza aaya. \")\n    print (\"Bye bye\")\nfunction_say_bye()\nfunction_say_bye()\nprint (\"Python ka istamaal bahot jagah hota hai.\")\nfunction_say_bye()\nfunction_say_bye()",
                    "testCases": []
                }
            },
            {
                "type": "markdown",
                "value": "**Output :-** "
            },
            {
                "type": "python",
                "value": {
                    "code": "Aapko mil ke maza aaya. \nBye bye\nAapko mil ke maza aaya. \nBye bye\nPython ka istamaal bahot jagah hota hai.\nAapko mil ke maza aaya. \nBye bye\nAapko mil ke maza aaya. \nBye bye",
                    "testCases": []
                }
            },
            {
                "type": "markdown",
                "value": "1. Hum python mein `def` keyword ka use kar ke function banate hain. `def` ke baad function ka naam, `function_say_bye` likha hain. Naam ke baad hum do bracket `(` `)` lagate hain.\n2. Bracket ke baad ek colon, `:` lagate hain. Python semicolon se samajh jaati hai ki function ka code shuru ho raha hai.\n3. Dekhiye ki sara function ka code indent (space) deke likha hua hai. Isse python ko samajh aata hai ki yeh function ke andar ka code hai.\n4. `print (\"Bye bye\")` ke baad code space diye bina likha hua hai. Isse python ko samajh aati hai ki function ka code kahatam ho gaya hai\n5. functions ko bhi variables ko naam dene ke rules ke hisaab se hi naam dete hain. yaad rakhne ke liye ek baar variables ko naam dene ke rules yaad rakh li jiye.\n\n \n\n## Function Call ko samajhna\n\n Neeche diye gaye code ko likhiye aur dekhiye ki iska koi output aa raha hai ya nahi. Nahi aa raha toh kyun nahi aa rahi? "
            },
            {
                "type": "python",
                "value": {
                    "code": "def definition_hello_again():\n    print (\"Firse Hello :)\")\n    print (\"Aap kaise ho?\")",
                    "testCases": []
                }
            },
            {
                "type": "markdown",
                "value": "Ab apne code mein yeh line add karein aur dekhein ki koi output aati hai. "
            },
            {
                "type": "python",
                "value": {
                    "code": "definition_hello_again()",
                    "testCases": []
                }
            },
            {
                "type": "markdown",
                "value": "**Output :-** "
            },
            {
                "type": "python",
                "value": {
                    "code": "Firse Hello :)\nAap kaise ho?",
                    "testCases": []
                }
            },
            {
                "type": "markdown",
                "value": "Python mein sirf function likh dene se function ka code chalta nahi hai. Yahan pehle humne def keyword ka use karke python ko function ka code bataya. Isko **\"FUNCTION DEFINITION\"** kehte hain. Fir humne baad mein `definition_hello_again()` likh ke function ko bulaya aur usme likha hua code chalwaya. Isko **\"FUNCTION CALL\"** karna kehte hain. **\"FUNCTION CALL\"** mein hum function ke naam ke baad 2 bracket `(` `)` lagate hain. Isse python ko pata chalta hai ki function ke andar ka code chalana hai. "
            },
            {
                "type": "youtube",
                "value": "WkC7ktXM_8k"
            },
            {
                "type": "youtube",
                "value": "AJJpGImQWLc"
            }
        ]
    },
    {
        "id": "3424",
        "parent_exercise_id": null,
        "course_id": "114",
        "name": "Question 1",
        "slug": "functions__functions-question1",
        "sequence_num": 100,
        "review_type": "manual",
        "submission_type": null,
        "github_link": "https://github.com/navgurukul/newton/tree/master/functions/functions-question1.md",
        "solution": null,
        "content": [
            {
                "type": "markdown",
                "value": "\n\n## Question 1\n\n \n\n### Question 1 (Part 1)\n\n `ask_question` naam ka Ek function likhiye jo yeh text ko \"ek baar\" print kare. Fir iss function ko 5 baar call kar ke yeh text 5 baar print karvao. \n\n### Question 1 (Part 2)\n\n Fir while loop ka use kar ke iss function ko 100 baar call karne ka code likho. Dono parts ka code ek hi file mein likh ke upload karo! "
            }
        ]
    },
    {
        "id": "3425",
        "parent_exercise_id": null,
        "course_id": "114",
        "name": "Pre-defined Functions Questions",
        "slug": "functions__Questions",
        "sequence_num": 200,
        "review_type": "manual",
        "submission_type": null,
        "github_link": "https://github.com/navgurukul/newton/tree/master/functions/Questions.md",
        "solution": null,
        "content": [
            {
                "type": "markdown",
                "value": "\n\n## Pre-defined Functions Questions\n\n Ab aapko kuchh questions solve krna hai pre-define function ka use kr ke. **Q1 .**  Aapko `max` function ka use krke di hue list me se sbse bada value print krvani hai. `Input` "
            },
            {
                "type": "python",
                "value": {
                    "code": "numbers = [3, 5, 7, 34, 2, 89, 2, 5]",
                    "testCases": []
                }
            },
            {
                "type": "markdown",
                "value": "**Output :-**\n89 **Q2.**  Aapko `sum` function ka use krke di hue list ke element ka sum  print krvana hai. `Input` "
            },
            {
                "type": "python",
                "value": {
                    "code": "numbers = [1, 2, 3, 4, 5]",
                    "testCases": []
                }
            },
            {
                "type": "markdown",
                "value": "**Output :-**\n15 **Q3.** Aapko `sort` function ka use kr ke di hue list ko sort krna hai. `Input:-` "
            },
            {
                "type": "python",
                "value": {
                    "code": "unorder_list = [6, 8, 4, 3, 9, 56, 0, 34, 7, 15]",
                    "testCases": []
                }
            },
            {
                "type": "markdown",
                "value": "**Output :-** `unorder_list = [0, 3, 4, 6, 7, 8, 9, 15, 34, 56]` **Q4.** `reverse` function ka use kr ke aapko di hue list ka revrse print krna hai. `Input:-` "
            },
            {
                "type": "python",
                "value": {
                    "code": "reverse_list = [\"Z\", \"A\", \"A\", \"B\", \"E\", \"M\", \"A\", \"R\", \"D\"]",
                    "testCases": []
                }
            },
            {
                "type": "markdown",
                "value": "**Output :-** `reverse_list = [\"D\", \"R\", \"A\", \"M\", \"E\", \"B\", \"A\", \"A\", \"Z\"]` **Q5.** Aapko `min` function ka use krke di hue list me se sbse chhoti value print krvani hai. `Input:-` "
            },
            {
                "type": "python",
                "value": {
                    "code": "list = [8, 6, 4, 8, 4, 50, 2, 7]",
                    "testCases": []
                }
            },
            {
                "type": "markdown",
                "value": "**Output :-** 2 "
            }
        ]
    },
    {
        "id": "3426",
        "parent_exercise_id": null,
        "course_id": "114",
        "name": " Debug the Code",
        "slug": "functions__DebugCode",
        "sequence_num": 300,
        "review_type": "manual",
        "submission_type": null,
        "github_link": "https://github.com/navgurukul/newton/tree/master/functions/DebugCode.md",
        "solution": null,
        "content": [
            {
                "type": "markdown",
                "value": "\n\n## Debug Code\n\n Ab hum function se related code ko debug karenge. **Question 1** "
            },
            {
                "type": "python",
                "value": {
                    "code": "def sum()\n    print(12+13)\nsum()",
                    "testCases": []
                }
            },
            {
                "type": "markdown",
                "value": "**Question 2** "
            },
            {
                "type": "python",
                "value": {
                    "code": "daf welcome():\n    print(\"Welcome to function\")\nwelcome()",
                    "testCases": []
                }
            },
            {
                "type": "markdown",
                "value": "**Question 3** "
            },
            {
                "type": "python",
                "value": {
                    "code": "\nisEven()\n\ndef isEven():\n    if(12%2==0):\n        print(\"Even Number\")\n    else:\n        print(\"Old Number\")",
                    "testCases": []
                }
            }
        ]
    },
    {
        "id": "3431",
        "parent_exercise_id": null,
        "course_id": "114",
        "name": "Function Arguments",
        "slug": "functions__functions-args",
        "sequence_num": 400,
        "review_type": "manual",
        "submission_type": null,
        "github_link": "https://github.com/navgurukul/newton/tree/master/functions/functions-args.md",
        "solution": null,
        "content": [
            {
                "type": "markdown",
                "value": "\n\n## What are function arguments?\n\n Abhi tak humne jo bhi functions code kare hain, unme kuch bahot simple print statements hain. Hum aise functions bhi likh sakte hain jo kuch data leke uss data ke saath kuch karte hain. Iss code ko chala ke dekho. "
            },
            {
                "type": "python",
                "value": {
                    "code": "numbers_list = [1, 2, 3, 4, 5, 6, 7, 10, -2]\nprint (max(numbers_list))",
                    "testCases": []
                }
            },
            {
                "type": "markdown",
                "value": "**Output :-**\n`10` Yahan humne `max` function ko `numbers_list` di aur usne usme se sabse badi value hume de di.  **max** function, python ka ek pre-defined function hai jise hum use kar sakte hai aur iske liye hume def max( ) likh kar usme code likhne ki koi jarurat nahi hai kyuki python banane wale ne humare liye ye kaam pehle hi kar diya hai. Aise hi len function bhi ek list leke hume list mein items ki ginti deta hai. len( ) function ka use hum kisi array ya sequence ki length find karne ke liye karte hai.Yeh  bhi python mai pre-define function hai. `Example :-` "
            },
            {
                "type": "python",
                "value": {
                    "code": "\na=[1,2,3,4,5,6]\nprint(len(a))",
                    "testCases": []
                }
            },
            {
                "type": "markdown",
                "value": "**Output :-**\n6 Neeche diye gaye code ko chala ke dekho aur ek baar socho ki kya ho raha hai. "
            },
            {
                "type": "python",
                "value": {
                    "code": "def say_hello(name):\n    print (\"Hello \", name)\n    print (\"Aap kaise ho?\")\nsay_hello(\"Aatif\")",
                    "testCases": []
                }
            },
            {
                "type": "markdown",
                "value": "**Output :-** Yahan humne function ko ussi tareeke se define kiya hai jaise pichle examples mein kiya tha. Lekin dhyan se dekho toh `def say_hello` ke baad brackets mein humne `name` likha hai aur, aur neeche ek `name` variable ko print command ke saath use kar rahe hain. Yahan name ko *parameter* kehte hain jiski value hum function call karne ke time de sakte hain. Aakhri line mein function call karte vakt humne brackets ke andar `\"Aatif\"` likha hai. Function call karte vakt hum jo parameters ko value dete hain, unko arguments kehte hain. Toh basically humne iss example mein yeh kiya aur seekha: * `say_hello` naam ka ek function define kiya jo ek `name` naam ka parameter leta hai aur uska use kar ke kuch print karta hai\n* fir humne function call kiya aur function call karne ke time ek argument diya jiski value \"Aatif\" thi\n* jab yeh function call hota hai toh jo humne string \"Aatif\" argument diya hai. Yahan uski value name parameter mein jaati hai aur. Jab yeh value\n* `name` parameter mein jaati hai, toh woh function ke andar same naam ke variable mein use kar sakte hain. Humne iss variable ka naam use kar ke print command likhi hai.\n\n **Note: Yeh thoda sa mushkil concept, agar bahot ache se samajh nahi aaya, toh ek aur baar padh ke aur dusre examples dekh ke zaroor samajh aa jayega ;-)** \n\n## Multiple Function Arguments\n\n Abhi tak humne ek function argument ke saath hi code likha hai. Ab hum thode aur function arguments ke saath code likhte hain. "
            },
            {
                "type": "python",
                "value": {
                    "code": "def add_numbers(number1, number2):\n    print (\"Main do numbers ko add karunga.\")\n    print (number1 + number2)\nadd_numbers(120, 50)\nnum_x = 134\nname = \"Rinki\"\nadd_numbers(num_x, name)",
                    "testCases": []
                }
            },
            {
                "type": "markdown",
                "value": "**Output :-** Yahan humne ek `add_numbers` naam ka function define kara hai. Lekin dekho ki bracket mein humne 2 parameter likhe hain. Ek sa jyada argument lene ke liye arguments ke baad comma laga dete hain Humne add_numbers(120, 50) likh ke function call karte samay do integer parameter diye hai. Yahan parameters ka kram / order important hai. Iss function call mein yeh hota  * `120` ki value *pehle parameter* `number1` mein jaati hai jo ki function ke andar same naam ke variable number1 mein hai\n* `50` ki value *dusre parameter* `number2` mein jaati hai jo ki function ke andar same naam ke variable number2 mein hai\n* Baad mein humne do variable define kare hain, `num_x` and `num_y` aur fir add_numbers ko num_x aur num_y arguments deke call kiya hai. Yahan bhi:\n* `num_x` ki value `134` pehle parameter `number1` mein jaati hai aur `num_y` ki value `Rinki` dusre parameter `number2` mein jaati hai.\n\n Aur ache se samajhne ke liye ek aur example dekhte hain. Jese ki apne dekha ki **output** mai **TypeError** aa rahi kuki hum kabhi bhi string aur integer concate nahi kar sakte hai.Humne num_1 mai **integer** store kiya aur name mai **string** store kiya hai. **Output :-** Yeh function do parameter leta hai, `name` aur `language` aur aise kaam karta hai: * Agar `language` `\"hindi\"` di hai, toh hindi mein kuch print karega\n* Agar `language` `\"punjabi\"` di hai, toh punjabi mein kuch print karega\n* Agar `\"hindi\"` aur `\"punjabi\"` ke ilava koi bhi language di hai toh english mein karega\n\n Yeh karne ke liye humne ek function define kiya jo do arguments leta hai, `name` aur `language`. Hum jab `say_hello_language(\"Rishabh\", \"punjabi\")` call karte hain toh yeh hota hai: * Pehle parameter, `name` mein \"Rishabh\" string jata hai aur dusre parameter, `language` mein punjabi jaata hai.\n* Fir humara program if-elif-else ka use kar ke dekhta hai language ki value kya hai aur uske hisaab se sahi language mein print kar deta ha\n* Isi tareeke se upar likhi hui saari function calls mein yeh hi hota hai\n\n\n \n\n## Ek aur example\n\n Chalane se pehle isko padh ke output ko sochne ki koshish karo. Fir chala ke dekho ki aapne sahi output sochi thi ya nahi. "
            },
            {
                "type": "python",
                "value": {
                    "code": "def say_hello_people(name_x, name_y, name_z, name_a):\n    print (\"Namaste \", name_x) # hindi mein\n    print (\"Alah hafiz \", name_y) # urdu mein\n    print (\"Bonjour \", name_z) # french mein\n    print (\"Hello \", name_a) # english mein\nsay_hello_people(\"Imitiyaz\", \"Rishabh\", \"Rahul\", \"Vidya\")\nsay_hello_people(\"Steve\", \"Saswata\", \"Shakrundin\", \"Rajeev\")",
                    "testCases": []
                }
            },
            {
                "type": "markdown",
                "value": "**Output :-** Iss function mein dekho ki yeh 4 argument leta hai, `name_x`, `name_y`, `name_z`, `name_a`. `def` waali pehli line mein humne 4 parameter ka naam comma (`,`) laga laga ke likhe hain. Function call karte samay jis kram / order mein humne parameters likhe hain def waali line mein, wahi kram / order mein arguments ki value parameters mein jaati hai. `say_hello_people(\"Imitiyaz\", \"Rishabh\", \"Rahul\", \"Vidya\")` mein parameters ki value iss hisaab se jaati hain: * `\"Imtiyaz\"` ki value pehle parameter `name_x` mein jaati hai\n* `\"Rishabh\"` ki value dusre parameter `name_y` mein jaati hai\n* `\"Rahul\"` ki value teesre parameter `name_z` mein jaati hai\n* `\"Vidya\"` ki value teesre parameter `name_a` mein jaati hai\n\n \n\n## Python Arbitrary Arguments \n\n Arbitrary arguments hum tab use karte hai jab hume pata nahi hota hai ki hume kitne no. of arguments function mai dene hai. Hum arbitrary arguments ke sath function of define karne ke liye parameter se pehle ( * ) ka use karte hai jai ki neeche dikhaya gaya hai. `Example:-` "
            },
            {
                "type": "python",
                "value": {
                    "code": "def icecream(*flavours):\n for flavour in flavours:\n  print(\"i love\"+flavour)\n\nicecream(\"chocolate\", \"butterscotch\",\"vanilla\",\"strawberry\")",
                    "testCases": []
                }
            },
            {
                "type": "markdown",
                "value": "**Output :-** \n\n## Default parameter value  \n\n Default parameter value se yaha humara ye matlab hai ki hum function ko define karte time kisi parameter ko value assign kar dete hai taaki hum function ko bina kisi argument ke call kare to vo default value ko le le. `Example :-` "
            },
            {
                "type": "python",
                "value": {
                    "code": "def attendance(name,status=\"absent\"):\n    print(name,\"is\",status,\" today\")\n\nattendance(\"kartik\",\"present\")\nattendance(\"sonu\")\nattendance(\"vishal\",\"present\")\nattendance(\"umesh\")",
                    "testCases": []
                }
            },
            {
                "type": "markdown",
                "value": "**Output :-** "
            }
        ]
    },
    {
        "id": "3429",
        "parent_exercise_id": null,
        "course_id": "114",
        "name": " Debug the Code",
        "slug": "functions__CodeDebug",
        "sequence_num": 500,
        "review_type": "manual",
        "submission_type": null,
        "github_link": "https://github.com/navgurukul/newton/tree/master/functions/CodeDebug.md",
        "solution": null,
        "content": [
            {
                "type": "markdown",
                "value": "\n\n## Debug Code\n\n\n\n\n Ab hum function se related code ko debug karenge. **Question 1** "
            },
            {
                "type": "python",
                "value": {
                    "code": "def greet(names):\n    for name in names:\n        print(\"Welcome\", name)\n\n\ngreet(\"Rinki\", \"Vishal\", \"Kartik\", \"Bijender\")",
                    "testCases": []
                }
            },
            {
                "type": "markdown",
                "value": "**Question 2** "
            },
            {
                "type": "python",
                "value": {
                    "code": "def info(name, age = ):\n   print(name + \" is \" + age + \" years old\")\n\ninfo(\"Sonu\")\ninfo(\"Sana\", \"17\")\ninfo(\"Umesh\", \"18\")",
                    "testCases": []
                }
            },
            {
                "type": "markdown",
                "value": "**Question 3** "
            },
            {
                "type": "python",
                "value": {
                    "code": "\ndef studentDetails(name,currentMilestone,mentorName):\n    print(\"Hello \" , name, \"your\" , currentMilestone, \"concept \" , \"is clear with the help of \", mentorName)\n\n\nstudentDetails(\"Nilam\",\"loop\")",
                    "testCases": []
                }
            }
        ]
    },
    {
        "id": "3428",
        "parent_exercise_id": null,
        "course_id": "114",
        "name": "Question 2",
        "slug": "functions__functions-question2",
        "sequence_num": 600,
        "review_type": "manual",
        "submission_type": null,
        "github_link": "https://github.com/navgurukul/newton/tree/master/functions/functions-question2.md",
        "solution": null,
        "content": [
            {
                "type": "markdown",
                "value": "\n\n## Question 2\n\n `function_print_lines` naam ka ek function likho jo 2 strings leta ho, aur unko neeche diye hue dhang se print karta ho. Jaise agar hum usko `\"Mera naam Rishabh hai.\"` aur `\"Main NavGurukul ka co-Founder hun.\"` denge toh woh yeh print karega "
            }
        ]
    },
    {
        "id": "3427",
        "parent_exercise_id": null,
        "course_id": "114",
        "name": "Question 3",
        "slug": "functions__Question2",
        "sequence_num": 700,
        "review_type": "manual",
        "submission_type": null,
        "github_link": "https://github.com/navgurukul/newton/tree/master/functions/Question2.md",
        "solution": null,
        "content": [
            {
                "type": "markdown",
                "value": "\n\n## Question 3\n\n\n \n\n### Question 3 (Part 1)\n\n Apko students naam ka ek function define karna hai or uss function mai  list of students name as a parameter pass karna hai(List ka use nahi karna hai) \n\n### Question 3 (Part 2)\n\n Apko isGreaterThen20 naam ka function define karna hai jismai apko function mai do parameter pass karane hai or first parameter by default 20 hi hona chahiye. "
            }
        ]
    },
    {
        "id": "3430",
        "parent_exercise_id": null,
        "course_id": "114",
        "name": "Question 4",
        "slug": "functions__functions-question3",
        "sequence_num": 800,
        "review_type": "manual",
        "submission_type": null,
        "github_link": "https://github.com/navgurukul/newton/tree/master/functions/functions-question3.md",
        "solution": null,
        "content": [
            {
                "type": "markdown",
                "value": "\n\n## Question 4\n\n Yeh question 2 parts mein hai. Dono pa\u0005rts ka code same file mein likh ke submit karein. \n\n### Question (Part 1)\n\n `add_numbers` naam ka function likhiye jo do numbers ko arguments ke tarah le aur fir unka sum print karta hai. Arguments ka naam `number1` aur `number2` hona chaiye. `Input :-` "
            },
            {
                "type": "python",
                "value": {
                    "code": "num1 = 56\nnum2 = 12\nadd_numbers(num1,num2)",
                    "testCases": []
                }
            },
            {
                "type": "markdown",
                "value": "**Output :-**\n68 \n\n## Question (Part 2)\n `add_numbers_list` naam ka function likhiye jo do integers ki 2 lists leta ho aur fir same position wale integers ka sum print karta ho. Same position waale 2 integers ka sum karne ke liye Part 1 mein di gayi add_numbers waale function ka use karo. Jaise agar hum iss function ko [50, 60, 10] aur [10, 20, 13] denge ko woh yeh print karega "
            }
        ]
    },
    {
        "id": "3432",
        "parent_exercise_id": null,
        "course_id": "114",
        "name": "Question 5",
        "slug": "functions__functions-question4",
        "sequence_num": 900,
        "review_type": "manual",
        "submission_type": null,
        "github_link": "https://github.com/navgurukul/newton/tree/master/functions/functions-question4.md",
        "solution": null,
        "content": [
            {
                "type": "markdown",
                "value": "\n\n## Question 5\n\n Yeh question 2 parts mein hai. Dono pa\u0005rts ka code same file mein likh ke submit karein. \n\n###  Question (Part 1)\n\n `check_numbers` naam ka ek function likhiye jo do numbers le aur fir print kare \"Dono even hain\" agar dono numbers even (2 se divide hote hain) nahi toh print kare \"Dono numbers even nahi hai\" \n\n###  Question (Part 2)\n Ab ek `check_numbers_list` naam ka ek function likho jo inetgers ki list ko arguments ki tarah le aur fir check kare ki same index waale dono integers even hain ya nahi. Yeh check karne ke liye pichle `Part 1` mein likhe `check_numbers` function ka use karo. Agar aapne apne function ko `[2, 6, 18, 10, 3, 75]` aur `[6, 19, 24, 12, 3, 87]` Toh usko yeh output deni chaiye: "
            }
        ]
    },
    {
        "id": "3434",
        "parent_exercise_id": null,
        "course_id": "114",
        "name": "Return Values",
        "slug": "functions__functions-return_values",
        "sequence_num": 1000,
        "review_type": "manual",
        "submission_type": null,
        "github_link": "https://github.com/navgurukul/newton/tree/master/functions/functions-return_values.md",
        "solution": null,
        "content": [
            {
                "type": "markdown",
                "value": "# How to return a value from a function?\n\n Kuch functions jo humne use kare hain, vapas kuch value dete hain. Matlab kuch data vapas dete hain. Abhi tak humne aise functions likhe hain jo kuch bhi vapas nahi dete.  Ek simple addition ka function likhte hain jo data vapas deta hai. "
            },
            {
                "type": "python",
                "value": {
                    "code": "def add_numbers(number_x, number_y):\n    number_sum = number_x + number_y\n    return number_sum\n\nsum1 = add_numbers(20, 40)\nprint (sum1)\nsum2 = add_numbers(560, 23)\na = 1234\nb = 12\nsum3 = add_numbers(a, b)\nprint (sum2)\nprint (sum3)\nnumber_a = add_numbers(20, 40) / add_numbers(5, 1)\nprint (number_a)",
                    "testCases": []
                }
            },
            {
                "type": "markdown",
                "value": "**Output** "
            },
            {
                "type": "python",
                "value": {
                    "code": "60\n583\n1246\n10.0",
                    "testCases": []
                }
            },
            {
                "type": "markdown",
                "value": "* Yahan humne function ussi tareeke se define kara hai jaise hum abhi tak functions ko define karte aaye hain. Lekin sirf function mein last line aap kuch naya dekhoge.\n* Last line mein humne `return` statement ka use kar ke function ko yeh bataya hai ki voh `number_sum` ki value ko vapas karega\n* Kyunki yeh function `number_sum` ki value vapas kar raha hai, hum iss value ko ek variable mein aasani se daal sakte hain.\n* Jaise humne neeche waali lines mein `sum1` variable mein `20` aur `40` ke sum ki value, 60 daal di hai\n* Humne **function definition** ki last line mein `return` ka use kar ke ek value vapas karvai hai function se. Hum isko return statement bolte hain. `Return` ka matlab hi vapas dena hota hai\n* Jo functions kuch values return karte hain, hum unn functions ke saath kaafi interesting kaam kar sakte hain jaise `number_a = add_numbers(20,40) / add_numbers(5,1)` waali line ko dekho. Yahan humne ek statement mein do add_numbers ko call kiya hai aur fir unn dono ka jo result mila (pehle ka 60 aur dusre ka 6) usko divide kar diya hai Yeh functions jo kuch return karte hain, hum unka use aise kisi statement mein kar sakte hain. Jaise humne division wali line mein kara hai.\n\n Hum same function ko return value ke bina likhte hain. "
            },
            {
                "type": "python",
                "value": {
                    "code": "def add_numbers_print(number_x, number_y):\n    number_sum = number_x + number_y\n    print (number_sum)\nsum4 = add_numbers_print(4, 5)\nprint (sum4)\nprint (type(sum4))",
                    "testCases": []
                }
            },
            {
                "type": "markdown",
                "value": "**Output :-** "
            },
            {
                "type": "python",
                "value": {
                    "code": "9\nNone\n<class 'NoneType'>",
                    "testCases": []
                }
            },
            {
                "type": "markdown",
                "value": "Humne yahan same upar wale function ka code likha hai, lekin return statement ka use nahi kiya. Iss vajah se hume yeh function kuch return nahi karega Kyunki yeh function kuch return nahi karta hai, hum apne numbers ke sum ko dusre variable mein nahi daal sakte jaise humne pichle example mein kiya tha. Yahan agar aap `sum4` ki value dekhoge toh woh `None` dikhayega. `None` ka matlab hota hai kuch nahi. Basically jo numbers value nahi return karte woh \"kuch nahi\" return karte hain `None` python mein ek alag tareeke ki type hai integer, float etc. ki tarah. `print (type(sum4))` waali line mein dekhoge ki woh sum4 ki type ko NoneType dikhayega. Iska matlab hota hai ki isme kuch nahi hai. Ek baar yeh neeche wale code ko padho aur socho ki kya hoga,. Ab usko chalao aur dekho ki aapne sahi socha tha "
            },
            {
                "type": "python",
                "value": {
                    "code": "number_b = add_numbers_print(5, 4) / add_numbers_print(2, 1)",
                    "testCases": []
                }
            },
            {
                "type": "markdown",
                "value": "**Output :-**  "
            },
            {
                "type": "python",
                "value": {
                    "code": "TypeError: unsupported operand type(s) for /: 'NoneType' and 'NoneType'",
                    "testCases": []
                }
            },
            {
                "type": "markdown",
                "value": "Yahan humne basically aise function ki values ko divide karne ki koshish kari hai jo koi value return nahi karta. Humne abhi padha tha ki jo function return nahi karte , woh None (matlab kuch nahi) return karte hain. Jab hum yahan None ko None se divide karte hain toh python baukhla jata hai aur samajh nahi pata ki kya karna hai. Iss vajah se error return kar deta hai. Python hume error mein bhi yahi bolta hai: **`unsupported operand type(s) for /: 'NoneType' and 'NoneType'`** Iska matlab yeh hai ki Python NoneType ki value ko NoneType ki value se hi divide nahi kar  aur iss chakar mein error aa gayi hai. \n\n## Understandng function execution with a return statement\n\n Iss example ko chalane se pehle, iska code padh ke socho ki yeh function kya return karega aur kya print karega jab hum isko 2 integer argument denge. "
            },
            {
                "type": "python",
                "value": {
                    "code": "def add_numbers_more(number_x, number_y):\n    number_sum = number_x + number_y\n    print (\"Hello from NavGurukul ;)\")\n    return number_sum\n    number_sum = number_x + number_x\n    print (\"Kya main yahan tak pahunchunga?\")\n    return number_sum\n\nsum6 = add_numbers_more(100, 20)",
                    "testCases": []
                }
            },
            {
                "type": "markdown",
                "value": "**Output :-** "
            },
            {
                "type": "python",
                "value": {
                    "code": "Hello from NavGurukul ;)",
                    "testCases": []
                }
            },
            {
                "type": "markdown",
                "value": "* Yahan yeh function \"Hello from NavGurukul ;)\" print karega aur 120 ki value return karega. Yeh 120 ki value \"return number_sum\" waali line ka use kar ke return karega.\n* `sum6` ki value 120 ho jayegi\n* Pehli `return number_sum` waali line se neeche aapne jo bhi code likha hai uss code mein se kuch bhi nahi chalega. Yeh isliye nahi chalega kyunki function chalate hue jab python ko ek return statement milti hai, toh python uss return statement ka use kar ke value return kar deta hai aur fir uske neeche wala koi bhi code nahi chalata hai.\n\n Thodi aur depth mein jake mein function execution samajhte hain python mein. Pehle iss code ko run kare bina samjahne ki try karo. Fir ek baar run kar ke dekho. "
            },
            {
                "type": "python",
                "value": {
                    "code": "def menu(day):\n    if day == \"monday\":\n        return \"Butter Chicken\"\n    elif day == \"tuesday\":\n        return \"Mutton Chaap\"\n    else:\n        return \"Chole Bhature\"\n\n    print (\"Kya main print ho payungi? :-(\")\n\nmon_menu = menu(\"monday\")\nprint (mon_menu)\ntues_menu = menu(\"tuesday\")\nprint (tues_menu)\nfri_menu = menu(\"friday\")\nprint (fri_menu)",
                    "testCases": []
                }
            },
            {
                "type": "markdown",
                "value": "**Output :-** "
            },
            {
                "type": "python",
                "value": {
                    "code": "Butter Chicken\nMutton Chaap\nChole Bhature",
                    "testCases": []
                }
            },
            {
                "type": "markdown",
                "value": "Humara `menu` function `day` argument ke hisaab se uss din ki menu ki item ki value return kar deta hai * Yahan mon_menu mein \"Butter Chicken\" ki value hogi kyunki humari if-elif-else statement yahan dekhti hai ki din \"monday\" diya hua hai toh \"Butter Chicken\" return kar deti hai. Jaise hi python ko return statement dikhti hai woh \"Butter Chicken\" return kar deti hai aur function chalna banda ho jata hai. Iss vajah se aakhir waali print command nahi chalti. Kyunki uss print command se pehle hi humesha return statement ki vajah se function chalna band ho jata hai\n* Aise hi jab day ki value \"tuesday\" hoti hai toh return \"Mutton Chaap\" waali return statement execute ho jati hai\n* Aur jab \"monday\" aur \"tuesday\" dono hi nahi hote, toh return \"Chole Bhature\" wali return statement execute ho jati hai.\n* **Lekin kyunki if-elif-else ke andar se hi return statement execute ho jaati hai, humara program kabhi bhi aakhir wali if statement tak pahunchta hi nahi hai aur woh kabhi print nahi hoti.**\n\n Ab hum same function iss dhang se likhenge ki aakhri wali print command bhi run hoye aur `\"Kya main priunt ho payungi? :-(\"` waali line print ho paye :D "
            },
            {